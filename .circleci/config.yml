# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    environment:
      TEST_REPORTS: /tmp/test-reports

    working_directory: ~/ML-generalization

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            mkdir -p ${TEST_REPORTS}
            pip install pipenv
            pipenv install --system --dev
            #python3 -m venv venv
            #. venv/bin/activate
            #pip install numpy
            #pip install -r requirements.txt

      #- save_cache:
      #    paths:
      #      - ./venv
      #    key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            pipenv run pytest -v --cov-report xml --cov=generalization
            cp -v coverage.xml ${TEST_REPORTS}

      - store_artifacts:
          path: /tmp/artifacts
          destination: build

      - store_test_results:
          path: /tmp/test-reports
